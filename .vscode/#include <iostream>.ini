#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <string>
#include <vector>
#include <curl/curl.h>

class NitroGen {
public:
    NitroGen() : fileName("Nitro Codes.txt") {}

    void main() {
        clearScreen();
        std::cout << R"(
 █████╗ ███╗   ██╗ ██████╗ ███╗   ██╗██╗██╗  ██╗
██╔══██╗████╗  ██║██╔═══██╗████╗  ██║██║╚██╗██╔╝
███████║██╔██╗ ██║██║   ██║██╔██╗ ██║██║ ╚███╔╝
██╔══██║██║╚██╗██║██║   ██║██║╚██╗██║██║ ██╔██╗
██║  ██║██║ ╚████║╚██████╔╝██║ ╚████║██║██╔╝ ██╗
╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝╚═╝  ╚═╝
)" << std::endl;

        std::this_thread::sleep_for(std::chrono::seconds(2));

        slowType("Made by: Drillenissen#4268 && Benz#7274", 0.02);
        std::this_thread::sleep_for(std::chrono::seconds(1));

        std::string url = "https://github.com";
        if (!checkInternetConnection(url)) {
            std::cout << "You are not connected to the internet. Check your connection and try again." << std::endl;
            return;
        }

        std::vector<std::string> valid;
        int invalid = 0;

        std::vector<char> chars;
        for (char ch = 'a'; ch <= 'z'; ++ch) {
            chars.push_back(ch);
        }
        for (char ch = 'A'; ch <= 'Z'; ++ch) {
            chars.push_back(ch);
        }
        for (char ch = '0'; ch <= '9'; ++ch) {
            chars.push_back(ch);
        }

        std::string nitro;
        nitro.resize(16);

        for (int i = 0; i < num; ++i) {
            try {
                generateRandomString(nitro, chars);
                std::string fullString = "https://discord.gift/" + nitro;

                bool result = quickChecker(fullString);
                if (result) {
                    valid.push_back(fullString);
                } else {
                    ++invalid;
                }
            } catch (const std::exception& e) {
                std::cerr << "Error: " << e.what() << std::endl;
            } catch (...) {
                std::cerr << "Unknown error occurred." << std::endl;
            }

            updateTitle(valid.size(), invalid);

            if (i % 500 == 0 && USE_WEBHOOK) {
                sendWebhookNotification(url, "```Checking Nitro Codes...```");
            }
        }

        printResults(valid, invalid);
    }

private:
    std::string fileName;

    void clearScreen() {
        // Platform-specific code to clear the screen
    }

    void slowType(const std::string& text, double speed, bool newLine = true) {
        for (char ch : text) {
            std::cout << ch << std::flush;
            std::this_thread::sleep_for(std::chrono::milliseconds(static_cast<int>(speed * 1000)));
        }
        if (newLine) {
            std::cout << std::endl;
        }
    }

    bool checkInternetConnection(const std::string& url) {
        try {
            CURL* curl = curl_easy_init();
            if (curl) {
                curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
                curl_easy_setopt(curl, CURLOPT_CONNECT_ONLY, 1L);
                CURLcode res = curl_easy_perform(curl);
                curl_easy_cleanup(curl);
                return res == CURLE_OK;
            }
        } catch (...) {
            // Handle exceptions
        }
        return false;
    }

    void generateRandomString(std::string& str, const std::vector<char>& charset) {
        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_int_distribution<> dis(0, charset.size() - 1);

        for (char& ch : str) {
            ch = charset[dis(gen)];
        }
    }

    void updateTitle(int validCount, int invalidCount) {
        // Platform-specific code to update the console title
    }

    bool quickChecker(const std::string& nitro) {
        // Perform the Nitro code checking logic here
        return false;
    }

    void sendWebhookNotification(const std::string& url, const std::string& content) {
        // Perform the logic to send a webhook notification
    }

    void printResults(const std::vector<std::string>& valid, int invalidCount) {
        std::cout << "\nResults:\n Valid: " << valid.size()
                  << "\n Invalid: " << invalidCount
                  << "\n Valid Codes: " << (valid.empty() ? "" : valid[0]);
        for (std::size_t i = 1; i < valid.size(); ++i) {
            std::cout << ", " << valid[i];
        }
        std::cout << std::endl;
    }
};

int main() {
    NitroGen nitroGen;
    nitroGen.main();
    return 0;
}
